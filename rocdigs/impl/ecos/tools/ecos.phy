#!/usr/bin/python
import time
from socket import *
myHost = ''
myPort = 15471
s = socket(AF_INET, SOCK_STREAM)     # create a TCP socket
s.bind((myHost, myPort))             # bind it to the serv
s.listen(5)                          # allow 5 simultaneou
                                     # pending connections

while 1:
  # wait for next client to connect
  connection, address = s.accept() # connection is a ne
  while 1:
    data = connection.recv(1024) # receive up to 1K b
    if data:
      connection.send('<REPLY queryObjects(10, addr, name, protocol)>\n')
      connection.send('1000 addr[3] name["DB V100"] protocol[DCC14]\n')
      connection.send('1001 addr[4] name["DB BR215"] protocol[DCC28]\n')
      connection.send('1002 addr[1] name["Harry Potter"] protocol[DCC28]\n')
      connection.send('1003 addr[5] name["DB BR64"] protocol[DCC128]\n')
      connection.send('1004 addr[7] name["NS 1302"] protocol[DCC128]\n')
      connection.send('1005 addr[10] name["Nieuw 0010"] protocol[DCC28]\n')
      connection.send('1006 addr[20] name["V200"] protocol[DCC28]\n')
      connection.send('<END 0 (OK)>\n')

      time.sleep(3)

      connection.send('<EVENT 100>\n')
      connection.send('100 state[0x400]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 100>\n')
      connection.send('100 state[0x0]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 200>\n')
      connection.send('200 state[0x3]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 200>\n')
      connection.send('200 railcom[01, 0356, 1]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 200>\n')
      connection.send('200 railcom[01, 0000, 0]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 102>\n')
      connection.send('102 state[0x10]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 102>\n')
      connection.send('102 state[0x0]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 1>\n')
      connection.send('102 state[0x10]\n')
      connection.send('<END 0 (OK)>\n')

      connection.send('<EVENT 1>\n')
      connection.send('102 state[0x0]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<EVENT 1>\n')
      connection.send('1 status[GO]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<EVENT 200>\n')
      connection.send('200 railcom[00, 0324, 1]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<EVENT 201>\n')
      connection.send('201 railcom[01, 5324, 1]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<EVENT 202>\n')
      connection.send('202 railcom[02, 7324, 1]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<REPLY get(202, railcom[12])>\n')
      connection.send('202 railcom[12, 64, 1]\n')
      connection.send('<END 0 (OK)>\n')
      
      connection.send('<EVENT 1004>\n')
      connection.send('1006 func[3, 1]\n')
      connection.send('<END 0 (OK)>\n')
      
      time.sleep(1)
      
      connection.send('<EVENT 1004>\n')
      connection.send('1006 speed[116]\n')
      connection.send('1006 speedstep[116]\n')
      connection.send('<END 0 (OK)>\n')
      
      
      connection.send('<REPLY get(1, info)>\n')
      connection.send('1 ECoS2\n')
      connection.send('1 ProtocolVersion[0.2]\n')
      connection.send('1 ApplicationVersion[4.0.2]\n')
      connection.send('1 HardwareVersion[2.0]\n')
      connection.send('<END 0 (OK)>\n')
      
      
      time.sleep(5)
      
connection.close()               # close socket
