<!--
 This is part of FreeRail - Model Railway Software
 
 Copyright: See AUTHORS at the top-level directory of this project and
 at GitHub <https://github.com/michaeloed/FreeRail/>
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3
 of the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
<Project name="RocRail" title="FreeRail API" docname="freerailapi" source="$Source: /cvsroot/rojav/rocrail/rocrail.xml,v $" revision="$Revision: 1.56 $">

  <object name="App" use="node" include="clntcon,srcpcon,control,weather,model,http,snmp,script" remark="FreeRail application">
    <fun name="inst" vt="this">
    </fun>
    <fun name="Main" vt="int">
      <param name="inst" vt="this" remark="App instance"/>
      <param name="argc" vt="int" remark="Commandline argument count"/>
      <param name="argv" vt="char**" remark="Commandline arguments"/>
    </fun>
    <fun name="getIni" vt="iONode"/>
    <fun name="getNewIni" vt="iONode"/>
    <fun name="setIni" vt="void">
      <param name="ini" vt="iONode" remark="New ini node"/>
    </fun>
    <fun name="getIniNode" vt="iONode">
      <param name="nodename" vt="const char*" remark="Node to find"/>
    </fun>
    <fun name="getModel" vt="iOModel"/>
    <fun name="getControl" vt="iOControl"/>
    <fun name="getWeather" vt="iOWeather"/>
    <fun name="getClntCon" vt="iOClntCon"/>
    <fun name="getSrcpCon" vt="iOSrcpCon"/>
    <fun name="shutdown" vt="Boolean">
      <param name="network" vt="int" remark="Shutdown RocNet too."/>
      <param name="signalname" vt="const char*" remark="Signal name."/>
    </fun>
    <fun name="saveIni" vt="void"/>
    <fun name="stop" vt="void"/>
    <fun name="ebreak" vt="void"/>
    <fun name="go" vt="void"/>
    <fun name="getStartTime" vt="long" remark=""/>
    <fun name="getBackTrace" vt="const char**" remark="Get the the last 10 exceptions."/>
    <fun name="isConsoleMode" vt="Boolean" remark=""/>
    <fun name="isStress" vt="Boolean" remark=""/>
    <fun name="getIniFile" vt="const char*" remark="Current ini filename."/>
    <fun name="listThreads" vt="void" remark=""/>
    <fun name="getLibPath" vt="const char*" remark="Path to the FreeRail libraries."/>
    <fun name="getImgPath" vt="const char*" remark="Path to images."/>
    <fun name="getIconPath" vt="const char*" remark="Path to icons."/>
    <fun name="getrevno" vt="int"/>
    <fun name="isCreateModplan" vt="Boolean"/>
    <fun name="isRunAtStartup" vt="Boolean"/>
    <fun name="broadcastEvent" vt="void">
      <param name="evt" vt="iONode"/>
    </fun>
    <fun name="link" vt="void">
      <param name="count" vt="int" remark="Link count."/>
      <param name="up" vt="Boolean" remark="upLink."/>
    </fun>
    <fun name="play" vt="void">
      <param name="record" vt="const char*"/>
    </fun>
    <fun name="stopPlay" vt="void"/>
    <data>
      <var name="ini" vt="iONode" remark="FreeRail ini"/>
      <var name="newini" vt="iONode" remark="FreeRail ini"/>
      <var name="model" vt="iOModel" remark=""/>
      <var name="control" vt="iOControl" remark=""/>
      <var name="weather" vt="iOWeather" remark=""/>
      <var name="clntCon" vt="iOClntCon" remark=""/>
      <var name="srcpCon" vt="iOSrcpCon" remark=""/>
      <var name="appstartTime" vt="long"/>
      <var name="http" vt="iOHttp" remark=""/>
      <var name="snmp" vt="iOSNMP" remark=""/>
      <var name="consoleMode" vt="Boolean" remark=""/>
      <var name="szIniFile" vt="const char*"/>
      <var name="szLibPath" vt="const char*"/>
      <var name="szImgPath" vt="const char*"/>
      <var name="stress" vt="Boolean"/>
      <var name="createmodplan" vt="Boolean"/>
      <var name="revno" vt="int"/>
      <var name="run" vt="Boolean"/>
      <var name="script" vt="iOScript"/>
    </data>
  </object>


  <interface name="HtmlInt" use="node">
    <fun name="tableHdr" vt="const char*"/>
    <fun name="toHtml" vt="char*">
      <param name="object" vt="void*"/>
    </fun>
    <fun name="getForm" vt="char*">
      <param name="object" vt="void*"/>
    </fun>
    <fun name="postForm" vt="char*">
      <param name="object" vt="void*"/>
      <param name="data" vt="const char*"/>
    </fun>
  </interface>

  <object name="Block" interface="$../rocint/rocint.xml:BlockBase" use="list,map,node,mutex" include="loc,htmlint,$rocint/public/blockbase" remark="Block object">
    <typedef def="enum {enter_event=100,enter2pre_event,enter2in_event,in_event,exit_event,pre2in_event,ghost_event,occupied_event,ident_event,shortin_event,run_event,stall_event,takeover_event,release_event,swap_event,enter2shortin_event,free_event,cmd_event} block_fbevent"/>
    <typedef def="enum {suits_not=0,suits_well=1,suits_ok=2} block_suits"/>
    <typedef def="void (*block_listener)(obj,block_fbevent)"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Block node"/>
    </fun>
    <fun name="setListener" vt="Boolean">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="listenerObj" vt="obj" remark="Listener Object"/>
      <param name="listenerFun" vt="const block_listener" remark="Listener Function"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="modification" vt="iONode" remark="Modification node"/>
    </fun>
    <fun name="setManual" vt="Boolean">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="manual" vt="Boolean"/>
    </fun>
    <fun name="getGroup" vt="const char*">
      <param name="inst" vt="this" remark="Block instance"/>
    </fun>
    <fun name="getEventCode" vt="int">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="evtname" vt="const char*"/>
    </fun>
    <data>
      <var name="id" vt="const char*"/>
      <var name="locId" vt="const char*"/>
      <var name="locIdGroup" vt="const char*"/>
      <var name="crossing" vt="Boolean"/>
      <var name="reverse" vt="Boolean"/>
      <var name="group" vt="const char*"/>
      <var name="fromBlockId" vt="const char*"/>
      <var name="byRouteId" vt="const char*"/>
      <var name="prevLocIdCnt" vt="int"/>
      <var name="prevLocId" vt="const char*"/>
      <var name="listenerObj" vt="obj"/>
      <var name="listenerFun" vt="block_listener"/>
      <var name="closereq" vt="Boolean"/>
      <var name="minbklc" vt="int"/>
      <var name="linkto" vt="iIBlockBase"/>
      <var name="props" vt="iONode" remark="Block properties"/>
      <var name="fbEvents" vt="iOMap"/>
      <var name="timer" vt="int" remark="event timer"/>
      <var name="timer2" vt="int" remark="event timer reverse direction"/>
      <var name="indelay" vt="int" remark="in event delay timer"/>
      <var name="muxLock" vt="iOMutex"/>
      <var name="mvMillis" vt="int"/>
      <var name="mvTime" vt="long"/>
      <var name="mvspeed" vt="float"/>
      <var name="manager" vt="iIBlockBase"/>
      <var name="occtime" vt="long"/>
      <var name="ghost" vt="Boolean"/>
      <var name="acceptident" vt="Boolean"/>
      <var name="wheelcount" vt="int"/>
      <var name="wheelcounterId" vt="const char*"/>
      <var name="forceblocktimer" vt="Boolean"/>
      <var name="pendingFree" vt="Boolean"/>
      <var name="tempwait" vt="Boolean"/>
      <var name="muxFiFO" vt="iOMutex"/>
      <var name="fifoList" vt="iOList"/>
      <var name="arrivalPending" vt="Boolean"/>
      <var name="inPending" vt="Boolean"/>
      <var name="fifo0departing" vt="Boolean"/>
      <var name="forcelock" vt="Boolean"/>
    </data>
  </object>

  <object name="Stage" interface="$../rocint/rocint.xml:BlockBase" use="list,map,node,mutex,thread" include="loc,htmlint,$rocint/public/blockbase" remark="Block object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Stage node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="modification" vt="iONode" remark="Modification node"/>
    </fun>
    <fun name="setSectionOcc" vt="void">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="sectionid" vt="const char*" remark="Section ID"/>
      <param name="locoid" vt="const char*" remark="Loco ID"/>
    </fun>
    <data>
      <var name="id" vt="const char*"/>
      <var name="locId" vt="const char*"/>
      <var name="targetSection" vt="int"/>
      <var name="pendingSection" vt="int"/>
      <var name="pendingFree" vt="Boolean"/>
      <var name="pendingMove" vt="Boolean"/>
      <var name="props" vt="iONode" remark="Stage properties"/>
      <var name="sectionList" vt="iOList"/>
      <var name="fbMap" vt="iOMap"/>
      <var name="sectionCount" vt="int"/>
      <var name="freeSections" vt="int"/>
      <var name="sectionLength" vt="int"/>
      <var name="trainGap" vt="int"/>
      <var name="linkto" vt="iIBlockBase"/>
      <var name="closereq" vt="Boolean"/>
      <var name="fromBlockId" vt="const char*"/>
      <var name="byRouteId" vt="const char*"/>
      <var name="trig_enter" vt="Boolean"/>
      <var name="trig_in" vt="Boolean"/>
      <var name="trig_exit" vt="Boolean"/>
      <var name="trig_out" vt="Boolean"/>
      <var name="trig_enter_mid" vt="Boolean"/>
      <var name="trig_exit_mid" vt="Boolean"/>
      <var name="trig_renter_mid" vt="Boolean" remark="reverse enter"/>
      <var name="trig_rexit_mid" vt="Boolean" remark="reverse exit"/>
      <var name="mapMux" vt="iOMutex"/>
      <var name="wait4enter" vt="Boolean"/>
      <var name="early2in" vt="Boolean"/>
      <var name="moveMux" vt="iOMutex"/>
      <var name="watchdog" vt="iOThread"/>
      <var name="run" vt="Boolean"/>
      <var name="wdrun" vt="Boolean"/>
      <var name="ghost" vt="Boolean"/>
      </data>
  </object>

  <object name="ClntCon" use="node,map,socket,thread,mutex" remark="Client connection.">
    <typedef def="void(*clntcon_callback)(obj,iONode)"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Client connection setup"/>
      <param name="port" vt="int"/>
      <param name="callbackfun" vt="clntcon_callback"/>
      <param name="callbackobj" vt="obj"/>
    </fun>
    <fun name="setCallback" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="callbackfun" vt="clntcon_callback"/>
      <param name="callbackobj" vt="obj"/>
    </fun>
    <fun name="broadcastEvent" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="evt" vt="iONode"/>
    </fun>
    <fun name="postEvent" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="evt" vt="iONode"/>
      <param name="iwname" vt="const char*" remark="InfoWriter thread name"/>
    </fun>
    <fun name="getClientCount" vt="int">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <fun name="getConCount" vt="int">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <fun name="getClientPort" vt="int">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <fun name="getClientHost" vt="const char*">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <data>
      <var name="ini" vt="iONode"/>
      <var name="callback" vt="clntcon_callback"/>
      <var name="callbackObj" vt="obj"/>
      <var name="srvrsocket" vt="iOSocket"/>
      <var name="manager" vt="iOThread"/>
      <var name="stress" vt="iOThread"/>
      <var name="infoWriters" vt="iOMap"/>
      <var name="muxMap" vt="iOMutex"/>
      <var name="broadcaster" vt="iOThread"/>
      <var name="port" vt="int"/>
      <var name="concount" vt="int"/>
    </data>
  </object>


  <object name="SrcpCon" use="node,map,socket,thread,mutex,serial" remark="SRCP Client connection.">
    <typedef def="void(*srcpcon_callback)(obj,iONode)"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Client connection setup"/>
      <param name="callbackfun" vt="srcpcon_callback"/>
      <param name="callbackobj" vt="obj"/>
    </fun>
    <fun name="setCallback" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="callbackfun" vt="srcpcon_callback"/>
      <param name="callbackobj" vt="obj"/>
    </fun>
    <fun name="broadcastEvent" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="evt" vt="iONode"/>
    </fun>
    <fun name="postEvent" vt="void">
      <param name="inst" vt="this" remark="ClntCon instance"/>
      <param name="evt" vt="iONode"/>
      <param name="iwname" vt="const char*" remark="InfoWriter thread name"/>
    </fun>
    <fun name="getClientCount" vt="int">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <fun name="getClientPort" vt="int">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <fun name="getClientHost" vt="const char*">
      <param name="inst" vt="this" remark="ClntCon instance"/>
    </fun>
    <data>
      <var name="ini" vt="iONode"/>
      <var name="callback" vt="srcpcon_callback"/>
      <var name="callbackObj" vt="obj"/>
      <var name="srvrsocket" vt="iOSocket"/>
      <var name="manager" vt="iOThread"/>
      <var name="stress" vt="iOThread"/>
      <var name="infoWriters" vt="iOMap"/>
      <var name="muxMap" vt="iOMutex"/>
      <var name="broadcaster" vt="iOThread"/>
      <var name="port" vt="int"/>
      <var name="serial" vt="iOSerial"/>
      <var name="serialOK" vt="Boolean"/>
      </data>
  </object>


  <object name="Control" use="node,map,thread" include="r2rnet,clntcon,powerman,$rocint/public/digint" remark="Control center for FreeRail">
    <typedef def="enum {CMD_OK=0,CMD_RETRY,CMD_ERROR} cmd_state"/>
    <typedef def="void(*control_callback)(obj,iONode)"/>
    <fun name="inst" vt="this">
      <param name="nocom" vt="Boolean" remark="Disable Communication"/>
    </fun>
    <fun name="getCallback" vt="control_callback" remark="The applications entry point">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Control instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
      <param name="error" vt="int*" remark="error code"/>
    </fun>
    <fun name="halt">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getIid" vt="const char*">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getTime" vt="long">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getState" vt="iONode">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="setBoosters" vt="void">
      <param name="inst" vt="this" remark="Control instance"/>
      <param name="boosterlist" vt="iONode" remark="Booster list"/>
    </fun>
    <fun name="power4Block" vt="Boolean">
      <param name="inst" vt="this" remark="Control instance"/>
      <param name="blockid" vt="const char*"/>
      <param name="power" vt="Boolean"/>
    </fun>
    <fun name="hasBlockPower" vt="Boolean">
      <param name="inst" vt="this" remark="Control instance"/>
      <param name="blockid" vt="const char*"/>
    </fun>
    <fun name="getR2Rnet" vt="iOR2Rnet">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <data>
      <var name="pDi" vt="iIDigInt" remark="Interface"/>
      <var name="iid" vt="const char*" remark="Interface Id"/>
      <var name="diMap" vt="iOMap"/>
      <var name="clockticker" vt="iOThread"/>
      <var name="txshortids" vt="iOThread"/>
      <var name="devider" vt="int"/>
      <var name="time" vt="long"/>
      <var name="timeset" vt="Boolean"/>
      <var name="clockrun" vt="Boolean"/>
      <var name="temp" vt="int"/>
      <var name="txshortidsrun" vt="Boolean"/>
      <var name="power" vt="Boolean"/>
      <var name="enablecom" vt="Boolean"/>
      <var name="programming" vt="Boolean"/>
      <var name="trackbus" vt="Boolean"/>
      <var name="sensorbus" vt="Boolean"/>
      <var name="accessorybus" vt="Boolean"/>
      <var name="needkey4loconet" vt="Boolean"/>
      <var name="checker" vt="iOThread"/>
      <var name="powerman" vt="iOPowerMan"/>
      <var name="r2rnet" vt="iOR2Rnet"/>
      <var name="devlist" vt="char*"/>
      </data>
  </object>


  <object name="FBack" interface="HtmlInt" use="node,list" include="htmlint" remark="Feedback object">
    <typedef def="void (*fback_listener)(obj,Boolean,const char*,const char*,const char*,const char*,const char*,int,int,Boolean)"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Feedback node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Feedback instance"/>
    </fun>
    <fun name="setListener" vt="Boolean">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="listenerObj" vt="obj"/>
      <param name="listenerFun" vt="const fback_listener"/>
    </fun>
    <fun name="addListener" vt="Boolean">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="listener" vt="obj"/>
    </fun>
    <fun name="removeListener" vt="Boolean">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="listener" vt="obj"/>
    </fun>
    <fun name="getAddrKey" vt="const char*">
      <param name="inst" vt="this" remark="Feedback instance"/>
    </fun>
    <fun name="createAddrKey" vt="char*">
      <param name="bus" vt="int" remark="Feedback bus"/>
      <param name="addr" vt="int" remark="Feedback address"/>
      <param name="iid" vt="const char*" remark="Interface ID"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="evt" vt="iONode" remark="Event node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="fb" vt="iONode" remark="Feedback node"/>
    </fun>
    <fun name="getState" vt="Boolean">
      <param name="inst" vt="this" remark="Feedback instance"/>
    </fun>
    <fun name="getIdentifier" vt="const char*">
      <param name="inst" vt="this" remark="Feedback instance"/>
    </fun>
    <fun name="setState" vt="void">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="state" vt="Boolean" remark="new sensor state"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Feedback instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
      <param name="update" vt="Boolean" remark="Send update events"/>
    </fun>
    <fun name="isState" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="state" vt="const char*" remark="State to compare with."/>
    </fun>
    <fun name="getCounter" vt="int">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="resetCounter" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="resetWheelCount" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="setCarCount" vt="void">
      <param name="inst" vt="this" remark="Block instance"/>
      <param name="count" vt="int" remark="Car count; Count cars before firing an event."/>
    </fun>
    <fun name="doTimedOff" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="hasShortcut" vt="Boolean">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="isAtGPSPos" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="sid" vt="int"/>
      <param name="x" vt="int"/>
      <param name="y" vt="int"/>
      <param name="z" vt="int"/>
      <param name="state" vt="Boolean*"/>
      </fun>
    <data>
      <var name="props" vt="iONode" remark="Feedback properties"/>
      <var name="state" vt="Boolean" remark="Current state"/>
      <var name="addrKey" vt="char*" remark="Address key"/>
      <var name="cutoutAddrKey" vt="char*" remark="Address key"/>
      <var name="listenerObj" vt="obj" remark="Feedback listener object"/>
      <var name="listenerFun" vt="fback_listener" remark="Feedback listener function"/>
      <var name="listeners" vt="iOList" remark="Feedback listeners"/>
      <var name="counter" vt="int" remark="occupied counter"/>
      <var name="carcount" vt="int"/>
      <var name="countedcars" vt="int"/>
      <var name="wheelcount" vt="int"/>
      <var name="timer" vt="int"/>
      <var name="timedoff" vt="int"/>
      <var name="shortcut" vt="Boolean"/>
      </data>
  </object>


  <object name="Loc" interface="HtmlInt" use="node,thread,map,mutex" include="htmlint" remark="Loc object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Loc node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getTrain" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getEngine" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getCurBlock" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getPrevBlock" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="resetPrevBlock" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getBlockEnterSide" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="setBlockEnterSide" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="enterside" vt="Boolean"/>
      <param name="blockId" vt="const char*"/>
    </fun>
    <fun name="getDestination" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="setCurBlock" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="blockid" vt="const char*" remark="Block ID"/>
    </fun>
    <fun name="setCarCount" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="carcount" vt="int" remark="Number of cars"/>
    </fun>
    <fun name="go" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="gomanual" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="govirtual" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="goNet" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="curblock" vt="const char*" remark="Current block"/>
      <param name="nextblock" vt="const char*" remark="Next block"/>
      <param name="nextroute" vt="const char*" remark="Next route"/>
    </fun>
    <fun name="stop" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="resume" vt="Boolean" remark="Resume automode."/>
    </fun>
    <fun name="stopNet" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="dispatch" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="brake" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="trySecondNextBlock" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="emiter" vt="obj" remark="Sender of event"/>
      <param name="event" vt="int" remark="Event code"/>
      <param name="wait" vt="int" units="ms" remark="wait time before processing the event"/>
      <param name="forcewait" vt="Boolean" remark="Force to use this wait time instead of the optional loco event wait."/>
      <param name="id" vt="const char*" remark="Sensor ID"/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="saveCurBlock" vt="Boolean" remark="save current block occupancy"/>
    </fun>
    <fun name="getLen" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="gotoBlock" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="blockid" vt="const char*"/>
    </fun>
    <fun name="getNextGotoBlock" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="prevblockid" vt="const char*"/>
    </fun>
    <fun name="useSchedule" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="scheduleid" vt="const char*"/>
    </fun>
    <fun name="useTour" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="tourid" vt="const char*"/>
    </fun>
    <fun name="getSchedule" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="index" vt="int*" remark="Current schedule index."/>
    </fun>
    <fun name="getTour" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="normalizeID" vt="char*">
      <param name="id" vt="const char*" remark="Loc ID"/>
    </fun>
    <fun name="getAddress" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getSecAddress" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getIdent" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getCV" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="nr" vt="int" remark="CVByte number"/>
    </fun>
    <fun name="setCV" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="nr" vt="int" remark="CVByte number"/>
      <param name="value" vt="int" remark="CVByte value"/>
    </fun>
    <fun name="swapPlacing" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="cmd" vt="iONode" remark="Optional cmd node with placing information."/>
      <param name="consist" vt="Boolean" remark="Swap in context of a multiple unit."/>
      <param name="direct" vt="Boolean"/>
    </fun>
    <fun name="swapBlockEnterSide" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="blockId" vt="const char*"/>
    </fun>
    <fun name="informBlock" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="destblockid" vt="const char*" remark="Destination block ID"/>
      <param name="curblockid" vt="const char*" remark="Current block ID"/>
    </fun>
    <fun name="getDir" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getPlacing" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="isAutomode" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="isResumeAutomode" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="isShortin" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getV" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getV_hint" vt="const char*">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="getFunctionStatus" vt="iONode">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="funcmd" vt="iONode" remark="function command node"/>
    </fun>
    <fun name="compareVhint" vt="int" remark="equal=0, lower=-1, higher=1">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="V_hint" vt="const char*"/>
    </fun>
    <fun name="isUseManualRoutes" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="setMode" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="mode" vt="const char*" remark="Automatic mode phase."/>
      <param name="reason" vt="const char*" remark="Automatic mode reason."/>
    </fun>
    <fun name="matchIdent" vt="Boolean">
      <param name="inst" vt="this" remark="Loco instance"/>
      <param name="ident1" vt="const char*" remark="Loco ident code"/>
      <param name="ident2" vt="const char*" remark="Loco ident code"/>
      <param name="ident3" vt="const char*" remark="Loco ident code"/>
      <param name="ident4" vt="const char*" remark="Loco ident code"/>
    </fun>
    <fun name="getCarCount" vt="int">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="depart" vt="void">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="getFnNrByDesc" vt="int">
      <param name="inst" vt="this" remark="Loco instance"/>
      <param name="desc" vt="const char*" remark="Function description"/>
    </fun>
    <fun name="isCheck2In" vt="Boolean">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="resetBBT" vt="void">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="isCommuter" vt="Boolean">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="getCargo" vt="const char*">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="getClass" vt="const char*">
      <param name="inst" vt="this" remark="Loco instance"/>
    </fun>
    <fun name="hasClass" vt="Boolean">
      <param name="inst" vt="this" remark="Loco instance"/>
      <param name="class" vt="const char*"/>
    </fun>
    <fun name="isGoManual" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="saveSpeed" vt="int">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="reset" vt="Boolean"/>
    </fun>
    <fun name="fifoTop" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="isManually" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="isReduceSpeedAtEnter" vt="Boolean">
      <param name="inst" vt="this" remark="Loc instance"/>
    </fun>
    <fun name="setClass" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="class" vt="const char*"/>
    </fun>
    <fun name="adjustAccel" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="accel" vt="int"/>
      <param name="weight" vt="int"/>
    </fun>
    <fun name="setMaxKmh" vt="void">
      <param name="inst" vt="this" remark="Loc instance"/>
      <param name="maxkmh" vt="int"/>
    </fun>
    <data include="$rocint/public/lcdriverint">
      <var name="props" vt="iONode"/>
      <var name="cvMap" vt="iOMap"/>
      <var name="runner" vt="iOThread"/>
      <var name="run" vt="Boolean"/>
      <var name="running" vt="Boolean"/>
      <var name="go" vt="Boolean"/>
      <var name="goNet" vt="Boolean"/>
      <var name="brake" vt="Boolean"/>
      <var name="check2in" vt="Boolean"/>
      <var name="curGroup" vt="const char*"/>
      <var name="prevBlock" vt="const char*"/>
      <var name="curBlock" vt="const char*"/>
      <var name="curSensor" vt="const char*"/>
      <var name="destBlock" vt="const char*"/>
      <var name="gotoBlock" vt="const char*" remark="goto this block if found"/>
      <var name="driver" vt="iILcDriverInt"/>
      <var name="curSpeed" vt="int"/>
      <var name="drvSpeed" vt="int"/>
      <var name="step" vt="int"/>
      <var name="speedstep" vt="int"/>
      <var name="fn0" vt="Boolean"/>
      <var name="fn1" vt="Boolean"/>
      <var name="fn2" vt="Boolean"/>
      <var name="fn3" vt="Boolean"/>
      <var name="fn4" vt="Boolean"/>
      <var name="fn5" vt="Boolean"/>
      <var name="fn6" vt="Boolean"/>
      <var name="fn7" vt="Boolean"/>
      <var name="fn8" vt="Boolean"/>
      <var name="fn9" vt="Boolean"/>
      <var name="fn10" vt="Boolean"/>
      <var name="fn11" vt="Boolean"/>
      <var name="fn12" vt="Boolean"/>
      <var name="fn13" vt="Boolean"/>
      <var name="fn14" vt="Boolean"/>
      <var name="fn15" vt="Boolean"/>
      <var name="fn16" vt="Boolean"/>
      <var name="fn17" vt="Boolean"/>
      <var name="fn18" vt="Boolean"/>
      <var name="fn19" vt="Boolean"/>
      <var name="fn20" vt="Boolean"/>
      <var name="fn21" vt="Boolean"/>
      <var name="fn22" vt="Boolean"/>
      <var name="fn23" vt="Boolean"/>
      <var name="fn24" vt="Boolean"/>
      <var name="fn25" vt="Boolean"/>
      <var name="fn26" vt="Boolean"/>
      <var name="fn27" vt="Boolean"/>
      <var name="fn28" vt="Boolean"/>
      <var name="timedfn" vt="int"/>
      <var name="fntimer" vt="int"/>
      <var name="fxtimer[32]" vt="int"/>
      <var name="fnevent" vt="int"/>
      <var name="fneventblock" vt="char*"/>
      <var name="ignevt" vt="int"/>
      <var name="fxrestored" vt="Boolean"/>
      <var name="fxrestoredbythread" vt="Boolean"/>
      <var name="speedrestoredbythread" vt="Boolean"/>
      <var name="fxsleep" vt="int"/>
      <var name="fxgroup" vt="int"/>
      <var name="fxresetpending" vt="Boolean"/>
      <var name="enter" vt="Boolean"/>
      <var name="enterId" vt="const char*"/>
      <var name="enterTick" vt="int"/>
      <var name="enterEmitter" vt="obj"/>
      <var name="in" vt="Boolean"/>
      <var name="inId" vt="const char*"/>
      <var name="inTick" vt="int"/>
      <var name="exitEmitter" vt="obj"/>
      <var name="exit" vt="Boolean"/>
      <var name="exitId" vt="const char*"/>
      <var name="exitTick" vt="int"/>
      <var name="out" vt="Boolean"/>
      <var name="outId" vt="const char*"/>
      <var name="outTick" vt="int"/>
      <var name="gomanual" vt="Boolean"/>
      <var name="manual" vt="Boolean"/>
      <var name="runtime" vt="long"/>
      <var name="secondnextblock" vt="Boolean"/>
      <var name="usemanualroutes" vt="Boolean"/>
      <var name="infocheck" vt="int"/>
      <var name="released" vt="Boolean"/>
      <var name="nrruns" vt="int"/>
      <var name="blocktrip" vt="char*"/>
      <var name="bbt" vt="Boolean"/>
      <var name="bbtMap" vt="iOMap"/>
      <var name="bbtCycle" vt="int"/>
      <var name="bbtCycleSpeed" vt="int"/>
      <var name="bbtCycleNr" vt="int"/>
      <var name="bbtEnter" vt="unsigned long"/>
      <var name="bbtIn" vt="unsigned long"/>
      <var name="bbtEnterBlock" vt="const char*"/>
      <var name="bbtInBlock" vt="const char*"/>
      <var name="bbtPrevBlock" vt="const char*"/>
      <var name="bbtRoute" vt="const char*"/>
      <var name="bbtEnterSpeed" vt="int"/>
      <var name="bbtSpeed" vt="int"/>
      <var name="bbtSpeedInterval" vt="int"/>
      <var name="bbtInterval" vt="int"/>
      <var name="bbtAtMinSpeed" vt="Boolean"/>
      <var name="bbtAtMin" vt="unsigned long"/>
      <var name="bbtInTimer" vt="int"/>
      <var name="bbtStepCount" vt="int"/>
      <var name="bbtExternalStop" vt="Boolean"/>
      <var name="bbtGenerateIn" vt="Boolean"/>
      <var name="bbtDelay" vt="int"/>
      <var name="sbtMap" vt="iOMap"/>
      <var name="sbtEnterBlock" vt="const char*"/>
      <var name="sbtInterval" vt="int"/>
      <var name="sbtDecelerate" vt="int"/>
      <var name="lastfncmd" vt="long"/>
      <var name="govirtual" vt="Boolean"/>
      <var name="muxEngine" vt="iOMutex"/>
      <var name="muxCmd" vt="iOMutex"/>
      <var name="savedSpeed" vt="int"/>
      <var name="v0sleep" vt="int"/>
      <var name="v0pending" vt="Boolean"/>
      <var name="maxkmh" vt="int"/>
    </data>
  </object>


  <object name="Model" use="node,list,map,doc,mutex,file" include="#stdio,block,loc,car,operator,route,fback,switch,track,signal,tt,output,text,seltab,stage,action,location,$rocint/public/blockbase" remark="The plan model">
    <typedef def="void (*model_listener)(obj,iONode)"/>
    <fun name="inst" vt="this">
      <param name="planfile" vt="const char*" remark="Plan filename"/>
      <param name="locofile" vt="const char*" remark="Loco filename"/>
      </fun>
    <fun name="init" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="addListener" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="listenerfun" vt="model_listener" remark="Listener function"/>
      <param name="cargo" vt="obj" remark="Listeners cargo"/>
    </fun>
    <fun name="isHealthy" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getModel" vt="const iONode">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="setModel" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="model" vt="iONode" remark="Model node"/>
    </fun>
    <fun name="getModPlan" vt="const iONode">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="setModPlan" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="modplan" vt="iONode" remark="ModPlan node"/>
    </fun>
    <fun name="getModule" vt="const iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="modid" vt="const char*" remark="ModuleID"/>
    </fun>
    <fun name="setModule" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="module" vt="iONode" remark="Module node"/>
    </fun>
    <fun name="modify" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="mod" vt="iONode" remark="Modification node"/>
    </fun>
    <fun name="modifyItem" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="mod" vt="iONode" remark="Modification node"/>
    </fun>
    <fun name="save" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="removeGen" vt="Boolean" remark="Remove generated objects."/>
    </fun>
    <fun name="saveAs" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="filename" vt="const char*" remark="Save as filename"/>
    </fun>
    <fun name="getLoc" vt="iOLoc">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="LocID to search for"/>
      <param name="props" vt="iONode" remark="Optional loco properties"/>
      <param name="generate" vt="Boolean" remark="Generate Loco if not found by ID or address."/>
      </fun>
    <fun name="getCar" vt="iOCar">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="CarID to search for"/>
    </fun>
    <fun name="getDec" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="DecID to search for"/>
    </fun>
    <fun name="getOperator" vt="iOOperator">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="Operator ID to search for"/>
    </fun>
    <fun name="getOperator4Car" vt="iOOperator">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="Car ID to search for"/>
    </fun>
    <fun name="getSensorsByAddress" vt="iOList">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
      <param name="bus" vt="int" remark="Bus number to search for"/>
      <param name="addr" vt="int" remark="Decoder address to search for"/>
      <param name="uidname" vt="const char*" remark="Alternative name for the bus number."/>
    </fun>
    <fun name="getSwByAddress" vt="obj">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
      <param name="bus" vt="int" remark="Bus number to search for"/>
      <param name="addr" vt="int" remark="Decoder address to search for"/>
      <param name="port" vt="int" remark="Decoder port to search for"/>
      <param name="gate" vt="int" remark="Decoder gate to search for"/>
      <param name="type" vt="int" remark="Port type to search for"/>
      <param name="uidname" vt="const char*" remark="Alternative name for the bus number."/>
      <param name="offset" vt="obj" remark="Optional switch object offset to be able to find another switch with the same address."/>
      </fun>
    <fun name="getSgByAddress" vt="iOSignal">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
      <param name="bus" vt="int" remark="Bus number to search for"/>
      <param name="addr" vt="int" remark="Decoder address to search for"/>
      <param name="port" vt="int" remark="Decoder port to search for"/>
      <param name="type" vt="int" remark="Port type to search for"/>
      <param name="uidname" vt="const char*" remark="Alternative name for the bus number."/>
    </fun>
    <fun name="getCoByAddress" vt="iOOutput">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
      <param name="bus" vt="int" remark="Bus number to search for"/>
      <param name="addr" vt="int" remark="Decoder address to search for"/>
      <param name="port" vt="int" remark="Decoder port to search for"/>
      <param name="type" vt="int" remark="Port type to search for"/>
      <param name="uidname" vt="const char*" remark="Alternative name for the bus number."/>
    </fun>
    <fun name="getLocByAddress" vt="iOLoc">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="decaddr" vt="int" remark="Loc decoder address to search for"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
    </fun>
    <fun name="getCarByAddress" vt="iOCar">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="decaddr" vt="int" remark="Car decoder address to search for"/>
      <param name="iid" vt="const char*" remark="Optional IID"/>
    </fun>
    <fun name="getLocByIdent" vt="iOLoc">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="ident1" vt="const char*" remark="Loc identifier to search for"/>
      <param name="ident2" vt="const char*" remark="Loc identifier to search for"/>
      <param name="ident3" vt="const char*" remark="Loc identifier to search for"/>
      <param name="ident4" vt="const char*" remark="Loc identifier to search for"/>
      <param name="dir" vt="Boolean" remark="Loco direction"/>
    </fun>
    <fun name="getCarByIdent" vt="iOCar">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="ident" vt="const char*" remark="Identifier to search for"/>
    </fun>
    <fun name="getLocIDs" vt="iOList">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getBlock" vt="iIBlockBase">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="BlockID to search for"/>
      </fun>
    <fun name="getBlockByAddr" vt="iIBlockBase">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="iid" vt="const char*" remark="Block trackdriver IID"/>
      <param name="addr" vt="int" remark="Block trackdriver address"/>
      </fun>
    <fun name="getTrack" vt="iOTrack">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="TrackID to search for"/>
    </fun>
    <fun name="getBlock4Signal" vt="iIBlockBase">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="signal ID"/>
    </fun>
    <fun name="getBlockLocation" vt="iOLocation">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="BlocID to search for"/>
    </fun>
    <fun name="getFBack" vt="iOFBack">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="FBackID to search for"/>
    </fun>
    <fun name="getGPSSensor" vt="iOFBack">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="sid" vt="int"/>
      <param name="x" vt="int"/>
      <param name="y" vt="int"/>
      <param name="z" vt="int"/>
      <param name="state" vt="Boolean*"/>
      </fun>
    <fun name="getSwitch" vt="iOSwitch">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="SwitchID to search for"/>
    </fun>
    <fun name="getSignal" vt="iOSignal">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="SignalID to search for"/>
    </fun>
    <fun name="getOutput" vt="iOOutput">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="OutputID to search for"/>
    </fun>
    <fun name="getRoute" vt="iORoute">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="RouteID to search for"/>
    </fun>
    <fun name="getResolvedRouteID" vt="const char*">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="RouteID to search for"/>
    </fun>
    <fun name="getTurntable" vt="iOTT">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="TurntableID to search for"/>
    </fun>
    <fun name="getStage" vt="iOStage">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="StageID to search for"/>
    </fun>
    <fun name="getSelectiontable" vt="iOSelTab">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="SelectiontableID to search for"/>
    </fun>
    <fun name="getAction" vt="iOAction">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="ActionID to search for"/>
    </fun>
    <fun name="getLocation" vt="iOLocation">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="LocationID to search for"/>
    </fun>
    <fun name="getSchedule" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="ScheduleID to search for"/>
    </fun>
    <fun name="getTour" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="TourID to search for"/>
    </fun>
    <fun name="getWeather" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="WeatherID to search for"/>
    </fun>
    <fun name="getText" vt="iOText">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="TextID to search for"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="evt" vt="iONode" remark="Event node"/>
    </fun>
    <fun name="getTitle" vt="const char*">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getVariable" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="Variable ID to search for"/>
    </fun>
    <fun name="getSysVar" vt="char*">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="Variable ID to search for"/>
    </fun>
    <fun name="addVariable" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="Variable ID to search for"/>
    </fun>
    <fun name="analyse" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="mode" vt="int" remark="analyse/clean/health check/extended Check"/>
    </fun>
    <fun name="addNetRoute" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="route" vt="iONode" remark="Route node"/>
    </fun>
    <fun name="addNetLoc" vt="iOLoc">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="lcprops" vt="iONode" remark="Loco node"/>
    </fun>
    <fun name="addNetBlock" vt="iIBlockBase">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="bkprops" vt="iONode" remark="Block node"/>
    </fun>
    <fun name="addItem" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="props" vt="iONode" remark="Item node"/>
    </fun>
    <fun name="findDest" vt="iIBlockBase">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="fromBlockId" vt="const char*" remark="Current blockid"/>
      <param name="fromRouteId" vt="const char*" remark="Current routeid"/>
      <param name="loc" vt="iOLoc" remark="Loc instance"/>
      <param name="routeRef" vt="iORoute*" remark="Route reference"/>
      <param name="gotoBlockId" vt="const char*" remark="Wanted blockid"/>
      <param name="swapPlacingInPrevRoute" vt="Boolean" remark="the route bevore is swapping the placement/direction"/>
      <param name="forceOppDir" vt="Boolean" remark="find a destination in the opposite direction of the running train"/>
      <param name="schedule" vt="Boolean"/>
      <param name="secondnextblock" vt="Boolean"/>
    </fun>
    <fun name="getScheduleIndex" vt="int" remark="returns the fitting route">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="scheduleid" vt="const char*" remark="scheduleid"/>
      <param name="curblockid" vt="const char*" remark="current blockid"/>
      <param name="loc" vt="iOLoc" remark="Loc instance"/>
    </fun>
    <fun name="calcRouteFromCurBlock" vt="iORoute" remark="returns the route to start with">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="routeList" vt="iOList" remark="if destination is found this list contains all routes to get there"/>
      <param name="scheduleid" vt="const char*" remark="scheduleid"/>
      <param name="scheduleIdx" vt="int*" remark="schedule index"/>
      <param name="curblockid" vt="const char*" remark="current blockid"/>
      <param name="currouteid" vt="const char*" remark="current routeid"/>
      <param name="loc" vt="iOLoc" remark="Loc instance"/>
      <param name="swapPlacingInPrevRoute" vt="Boolean" remark="Force same direction."/>
      <param name="indelay" vt="int*" remark="in event delay timer"/>
      <param name="secondnextblock" vt="Boolean"/>
    </fun>
    <fun name="calcRoute" vt="iORoute" remark="returns the route to start with">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="routeList" vt="iOList" remark="if destination is found this list contains all routes to get there"/>
      <param name="fromBlockId" vt="const char*" remark="Current blockid"/>
      <param name="toLocationId" vt="const char*" remark="Wanted location"/>
      <param name="toBlockId" vt="const char*" remark="Wanted block"/>
      <param name="loc" vt="iOLoc" remark="Loc instance"/>
      <param name="swapPlacingInPrevRoute" vt="Boolean" remark="Force same direction."/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="isAuto" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="initField" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="full" vt="Boolean"/>
      </fun>
    <fun name="printLocs" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="printSwitches" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="printSignals" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="printRoutes" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="printFBacks" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="printBlocks" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="f" vt="FILE *" remark="Stream object"/>
    </fun>
    <fun name="getFBStat" vt="iOList">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="stop" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="updateFB" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getLevelItems" vt="iOList">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="level" vt="int" remark="requested level"/>
      <param name="cx" vt="int*" remark="max width"/>
      <param name="cy" vt="int*" remark="max height"/>
      <param name="forserefresh" vt="Boolean" remark="collect items even if list already exist"/>
    </fun>
    <fun name="checkForBlockGroup" vt="const char*">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="BlockId" vt="const char*" remark="block id to find in a group"/>
    </fun>
    <fun name="lockBlockGroup" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="Group" vt="const char*"/>
      <param name="BlockId" vt="const char*"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="unlockBlockGroup" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="Group" vt="const char*"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="isBlockGroupLockedForLoco" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="BlockId" vt="const char*"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="getTime" vt="long">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getSwitchMap" vt="iOMap">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getSignalMap" vt="iOMap">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getFeedbackMap" vt="iOMap">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="getLocoMap" vt="iOMap">
      <param name="inst" vt="this" remark="Control instance"/>
    </fun>
    <fun name="isEnableSwFb" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="setBlockOccupancy" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="BlockId" vt="const char*" remark="Block ID to set."/>
      <param name="LocId" vt="const char*" remark="Loco ID which occupies this block."/>
      <param name="closed" vt="Boolean" remark="Signal closed block."/>
      <param name="placing" vt="int" remark="Loco placing: 0 = Not set, 1 = True, 2 = False"/>
      <param name="enterside" vt="int" remark="Block enter side: 0 = Not set, 1 = True, 2 = False"/>
      <param name="SectionId" vt="const char*" remark="Stage block section ID to set."/>
    </fun>
    <fun name="saveBlockOccupancy" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="occfilename" vt="const char*" remark="Optional filename"/>
    </fun>
    <fun name="loadBlockOccupancy" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="removeFbKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="feedback key"/>
      <param name="fb" vt="obj" remark="object"/>
    </fun>
    <fun name="addFbKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="feedback key"/>
      <param name="fb" vt="obj" remark="object"/>
    </fun>
    <fun name="removeSwKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="switch key"/>
    </fun>
    <fun name="addSwKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="switch key"/>
      <param name="sw" vt="iOSwitch" remark="switch object"/>
    </fun>
    <fun name="removeCoKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="output key"/>
    </fun>
    <fun name="addCoKey" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="key" vt="const char*" remark="output key"/>
      <param name="co" vt="iOOutput" remark="output object"/>
    </fun>
    <fun name="getRouteAliases" vt="iOList">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="routeIds" vt="const char*"/>
    </fun>
    <fun name="getManagedID" vt="const char*">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="blockid" vt="const char*" remark="BlockID"/>
    </fun>
    <fun name="addSysEventListener" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="listener" vt="obj" remark="listener object"/>
    </fun>
    <fun name="removeSysEventListener" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="listener" vt="obj" remark="listener object"/>
    </fun>
    <fun name="isScheduleFree" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="scid" vt="const char*" remark="schedule ID"/>
      <param name="lcid" vt="const char*" remark="loco ID"/>
    </fun>
    <fun name="forceUnlock" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getMasterLoc" vt="iOLoc">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="slaveID" vt="const char*"/>
    </fun>
    <fun name="hasBlockCars" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="id" vt="const char*" remark="BlockID to search for"/>
    </fun>
    <fun name="isSaveOnShutdown" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <fun name="getResolveVariable" vt="iONode">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="varid" vt="const char*" remark="VarID to search for"/>
      <param name="map" vt="iOMap" remark="Map with replacements"/>
    </fun>
    <fun name="initMasterLocMap" vt="void">
      <param name="inst" vt="this" remark="Model instance"/>
    </fun>
    <data include="mvtrack,modplan">
      <var name="callback" vt="model_listener"/>
      <var name="cbCargo" vt="obj"/>
      <var name="healthy" vt="Boolean"/>
      <var name="autoMode" vt="Boolean"/>
      <var name="fileName" vt="const char*"/>
      <var name="locoFileName" vt="const char*"/>
      <var name="title" vt="const char*"/>
      <var name="planFile" vt="iOFile"/>
      <var name="planDoc" vt="iODoc"/>
      <var name="model" vt="iONode"/>
      <var name="locMap" vt="iOMap"/>
      <var name="locList" vt="iOList"/>
      <var name="masterLocMap" vt="iOMap"/>
      <var name="carMap" vt="iOMap"/>
      <var name="operatorMap" vt="iOMap"/>
      <var name="switchMap" vt="iOMap"/>
      <var name="switchList" vt="iOList"/>
      <var name="signalMap" vt="iOMap"/>
      <var name="outputMap" vt="iOMap"/>
      <var name="feedbackMap" vt="iOMap"/>
      <var name="blockMap" vt="iOMap"/>
      <var name="blockGroupMap" vt="iOMap"/>
      <var name="routeMap" vt="iOMap"/>
      <var name="routePicker" vt="int"/>
      <var name="routeCheckDir[10]" vt="Boolean"/>
      <var name="routeList" vt="iOList"/>
      <var name="trackMap" vt="iOMap"/>
      <var name="textMap" vt="iOMap"/>
      <var name="ttMap" vt="iOMap"/>
      <var name="seltabMap" vt="iOMap"/>
      <var name="stageMap" vt="iOMap"/>
      <var name="fbAddrMap" vt="iOMap"/>
      <var name="swAddrMap" vt="iOMap"/>
      <var name="coAddrMap" vt="iOMap"/>
      <var name="locationMap" vt="iOMap"/>
      <var name="scheduleMap" vt="iOMap"/>
      <var name="tourMap" vt="iOMap"/>
      <var name="weatherMap" vt="iOMap"/>
      <var name="actionMap" vt="iOMap"/>
      <var name="waybillMap" vt="iOMap"/>
      <var name="muxFindDest" vt="iOMutex"/>
      <var name="fbAddresses[32][256]" vt="byte" remark="array of active feedback module addresses used to inform the digint"/>
      <var name="levelItemsMap" vt="iOMap"/>
      <var name="occMap" vt="iOMap"/>
      <var name="occMux" vt="iOMutex"/>
      <var name="mvtrack" vt="iOMVTrack"/>
      <var name="enableswfb" vt="Boolean"/>
      <var name="moduleplan" vt="iOModPlan"/>
      <var name="sysEventListeners" vt="iOList"/>
      <var name="startallera" vt="int"/>
      <var name="pendinginitfield" vt="Boolean"/>
      <var name="pendingstartall" vt="Boolean"/>
      <var name="pendingstartallvirtual" vt="Boolean"/>
      <var name="muxSysEvent" vt="iOMutex"/>
      <var name="timedoff" vt="iOThread"/>
      <var name="locationMux" vt="iOMutex"/>
      <var name="saveonshutdown" vt="Boolean"/>
    </data>
    <struct name="LevelList" typedef="*iOLevelList">
      <var name="list" vt="iOList"/>
      <var name="level" vt="int"/>
      <var name="cx" vt="int"/>
      <var name="cy" vt="int"/>
    </struct>
  </object>

  <object name="ModelUtils" use="node,list,map" include="block,loc,car,operator,route,fback,switch,track,signal,tt,output,text,seltab,stage,action,location,$rocint/public/blockbase" remark="The model utilities">
    <fun name="inst" vt="this">
      <param name="model" vt="iONode"/>
    </fun>
    <fun name="setModel" vt="void">
      <param name="inst" vt="this"/>
      <param name="model" vt="iONode"/>
    </fun>
    <fun name="renameItemDependencies" vt="Boolean">
      <param name="model" vt="iONode"/>
      <param name="id" vt="const char*"/>
      <param name="previd" vt="const char*"/>
      <param name="props" vt="iONode"/>
    </fun>
    <data>
      <var name="model" vt="iONode"/>
    </data>
  </object>

  <object name="RCon" use="node,thread,socket" remark="RCon object">
    <typedef def="void (*rcon_callback)(obj, iONode)"/>
    <fun name="inst" vt="this">
      <param name="host" vt="const char*" remark="Hostname"/>
      <param name="port" vt="int" remark="Port number"/>
    </fun>
    <fun name="setCallback" vt="void">
      <param name="inst" vt="this" remark="RCon instance"/>
      <param name="listenerfun" vt="rcon_callback" remark="Callback function"/>
      <param name="cargo" vt="obj" remark="Listeners cargo"/>
    </fun>
    <fun name="write" vt="Boolean">
      <param name="inst" vt="this" remark="RCon instance"/>
      <param name="cmd" vt="char*" remark="Command string"/>
    </fun>
    <fun name="close" vt="void">
      <param name="inst" vt="this" remark="RCon instance"/>
    </fun>
    <data>
      <var name="callback" vt="rcon_callback"/>
      <var name="cbCargo" vt="obj"/>
      <var name="sh" vt="iOSocket"/>
      <var name="infoReader" vt="iOThread"/>
      <var name="host" vt="char*"/>
      <var name="port" vt="int"/>
      <var name="run" vt="Boolean"/>
    </data>
  </object>


  <object name="Route" interface="HtmlInt" use="node" include="loc,htmlint" remark="Route object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Route node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="go" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="getFromBlock" vt="const char*">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="getToBlock" vt="const char*">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="getBlockSignalSide" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="bkid" vt="const char*" remark="Block ID"/>
    </fun>
    <fun name="getToBlockSide" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="getFromBlockSide" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="lock" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="locid" vt="const char*" remark="Locking locid"/>
      <param name="reverse" vt="Boolean" remark="running direction"/>
      <param name="lockswitches" vt="Boolean" remark="lock all switches for this route"/>
    </fun>
    <fun name="unLock" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="locid" vt="const char*" remark="Unlocking locid"/>
      <param name="resblocks" vt="const char**" remark="Reserved blocks; not to unlock as crossing blocks."/>
      <param name="unlockswitches" vt="Boolean" remark="unlock all switches for this route"/>
      <param name="force" vt="Boolean" remark="Force unlock."/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="getDirection" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="blockid" vt="const char*"/>
      <param name="fromto" vt="Boolean*"/>
    </fun>
    <fun name="getVelocity" vt="const char*">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="percent" vt="int*" remark="Speed percent"/>
      <param name="loco" vt="iOLoc" remark="Loco to check for speed condition."/>
    </fun>
    <fun name="getMaxKmh" vt="int">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="isSwapPost" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="hasThrownSwitch" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="hasSwitchCommands" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="isSet" vt="Boolean" remark="true if all turnouts are set">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="isFree" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="locid" vt="const char*" remark="Locking locid"/>
    </fun>
    <fun name="isManual" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="isset" vt="Boolean*" remark="Is manually set by CTC."/>
    </fun>
    <fun name="hasPermission" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="lc" vt="iOLoc" remark="Loco to check for permission."/>
      <param name="prevBlockID" vt="const char*" remark="Previous block ID."/>
      <param name="mustChDir" vt="Boolean" remark="Train must change direction to use this route."/>
    </fun>
    <fun name="isSetCrossingblockSignals" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="link" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="linkto" vt="int" remark="link to port"/>
    </fun>
    <fun name="unLink" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="isLocked" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="setClosed" vt="void">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="isClosed" vt="Boolean">
      <param name="inst" vt="this" remark="Route instance"/>
    </fun>
    <fun name="setClass" vt="void">
      <param name="inst" vt="this" remark="Route instance"/>
      <param name="class" vt="const char*"/>
    </fun>
    <fun name="isState" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="state" vt="const char*" remark="State to compare with."/>
    </fun>
    <data>
      <var name="lockedId" vt="const char*"/>
      <var name="requestId" vt="const char*"/>
      <var name="props" vt="iONode"/>
      <var name="reverse" vt="Boolean"/>
      <var name="routeLockId" vt="char*"/>
      <var name="ctc1" vt="Boolean"/>
      <var name="ctc2" vt="Boolean"/>
      <var name="ctc3" vt="Boolean"/>
      <var name="testlocked" vt="Boolean"/>
      </data>
  </object>


  <object name="Switch" interface="HtmlInt" use="node,mutex,thread,list" include="htmlint,route" remark="Switch object">
    <typedef def="enum {SW_STRAIGHT=0,SW_TURNOUT,SW_LEFT,SW_RIGHT,SW_UNKNOWN} sw_state"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Switch node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="lock" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="locid" vt="const char*" remark="Locking locid"/>
      <param name="route" vt="iORoute" remark="Route instance"/>
    </fun>
    <fun name="unLock" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="locid" vt="const char*" remark="Unlocking locid"/>
      <param name="route" vt="iORoute" remark="Route instance"/>
      <param name="force" vt="Boolean" remark="Force unlock."/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
      <param name="update" vt="Boolean" remark="Send update events"/>
      <param name="extra" vt="int" remark="extra parameter for special cases"/>
      <param name="error" vt="int*" remark="error code"/>
      <param name="lcid" vt="const char*" remark="loco id"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="isLocked" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="locid" vt="const char*" remark="Querying locid"/>
      <param name="manual" vt="Boolean" remark="Manual command issued from a client."/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="green" vt="void">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="red" vt="void">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="getAddrKey" vt="const char*">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="getAddrKey2" vt="const char*">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="createAddrKey" vt="char*">
      <param name="bus" vt="int" remark="Decoder bus"/>
      <param name="addr" vt="int" remark="Decoder addres"/>
      <param name="port" vt="int" remark="Port number"/>
      <param name="type" vt="int" remark="Port type"/>
      <param name="iid" vt="const char*" remark="Interface ID"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="evt" vt="iONode" remark="Event node"/>
    </fun>
    <fun name="isLeft" vt="Boolean" remark="true if this is a left turnout">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="isRight" vt="Boolean" remark="true if this is a right turnout">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="checkSenPos" vt="void" remark="check if the save position must be set and if the sensors are set">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="isSet" vt="Boolean" remark="true if the sensor state matches the wanted state">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="isState" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="state" vt="const char*" remark="State to compare with."/>
    </fun>
    <fun name="addListener" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="listener" vt="obj"/>
    </fun>
    <fun name="removeListener" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="listener" vt="obj"/>
    </fun>
    <fun name="link" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
      <param name="linkto" vt="int" remark="link to port"/>
    </fun>
    <fun name="unLink" vt="Boolean">
      <param name="inst" vt="this" remark="Switch instance"/>
    </fun>
    <fun name="has2Units" vt="Boolean">
      <param name="inst" vt="this"/>
    </fun>
    <data include="fback">
      <var name="id" vt="const char*"/>
      <var name="lockedId" vt="const char*"/>
      <var name="route" vt="iORoute"/>
      <var name="savepostimer" vt="int"/>
      <var name="props" vt="iONode"/>
      <var name="accctrl" vt="iONode"/>
      <var name="isStateInverted" vt="Boolean"/>
      <var name="fbstate" vt="sw_state"/>
      <var name="fb2state" vt="sw_state"/>
      <var name="hasFbSignal" vt="Boolean"/>
      <var name="fbR" vt="iOFBack"/>
      <var name="fbG" vt="iOFBack"/>
      <var name="fb2R" vt="iOFBack"/>
      <var name="fb2G" vt="iOFBack"/>
      <var name="fbOcc" vt="iOFBack"/>
      <var name="fbOcc2" vt="iOFBack"/>
      <var name="fbRinv" vt="Boolean"/>
      <var name="fbGinv" vt="Boolean"/>
      <var name="fb2Rinv" vt="Boolean"/>
      <var name="fb2Ginv" vt="Boolean"/>
      <var name="addrKey" vt="char*" remark="Address key"/>
      <var name="addrKey2" vt="char*" remark="Address key"/>
      <var name="muxLock" vt="iOMutex"/>
      <var name="muxCmd" vt="iOMutex"/>
      <var name="activated" vt="Boolean"/>
      <var name="fieldState1" vt="int"/>
      <var name="fieldState2" vt="int"/>
      <var name="accThread" vt="iOThread"/>
      <var name="accrun" vt="Boolean"/>
      <var name="run" vt="Boolean"/>
      <var name="ctc1" vt="Boolean"/>
      <var name="ctc2" vt="Boolean"/>
      <var name="pendingflip" vt="Boolean"/>
      <var name="listeners" vt="iOList"/>
      <var name="testThread" vt="iOThread"/>
      <var name="testRun" vt="Boolean"/>
      <var name="pendingSet" vt="Boolean"/>
      </data>
  </object>


  <object name="Signal" interface="HtmlInt" use="node" include="htmlint" remark="Signal object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Signal node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="getState" vt="const char*">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="green" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="yellow" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="red" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="white" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="blank" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
    </fun>
    <fun name="aspect" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
      <param name="nr" vt="int" remark="Signal aspect number"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Signal instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
      <param name="update" vt="Boolean" remark="Send update events"/>
    </fun>
    <fun name="isState" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="state" vt="const char*" remark="State to compare with."/>
    </fun>
    <fun name="isManualOperated" vt="Boolean">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="isResetManualOperated" vt="Boolean">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Signal instance"/>
      <param name="evt" vt="iONode" remark="Event node"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="isStateInverted" vt="Boolean"/>
    </data>
  </object>


  <object name="Output" interface="HtmlInt" use="node,list" include="htmlint" remark="Common Output object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Output node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Output instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Output instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="on" vt="void">
      <param name="inst" vt="this" remark="Output instance"/>
    </fun>
    <fun name="off" vt="void">
      <param name="inst" vt="this" remark="Output instance"/>
    </fun>
    <fun name="getAddrKey" vt="const char*">
      <param name="inst" vt="this" remark="Output instance"/>
    </fun>
    <fun name="createAddrKey" vt="char*">
      <param name="bus" vt="int" remark="Decoder bus"/>
      <param name="addr" vt="int" remark="Decoder addres"/>
      <param name="port" vt="int" remark="Port number"/>
      <param name="type" vt="int" remark="Port type"/>
      <param name="iid" vt="const char*" remark="Interface ID"/>
    </fun>
    <fun name="event" vt="void">
      <param name="inst" vt="this" remark="Output instance"/>
      <param name="evt" vt="iONode" remark="Event node"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Output instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
      <param name="update" vt="Boolean" remark="Send update events"/>
    </fun>
    <fun name="isState" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="state" vt="const char*" remark="State to compare with."/>
    </fun>
    <fun name="addListener" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="listener" vt="obj"/>
    </fun>
    <fun name="removeListener" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="listener" vt="obj"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="addrKey" vt="char*" remark="Address key"/>
      <var name="listeners" vt="iOList"/>
      </data>
  </object>


  <object name="Text" interface="HtmlInt" use="node,map" include="htmlint" remark="Text object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Text node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Text instance"/>
    </fun>
    <fun name="getText" vt="const char*">
      <param name="inst" vt="this" remark="Text instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Text instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="replaceAllSubstitutions" vt="char*">
      <param name="s" vt="const char*" remark="Input string"/>
      <param name="map" vt="iOMap" remark="Map with replacements"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
    </data>
  </object>


  <object name="Track" use="node" remark="Track object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Track node"/>
    </fun>
    <fun name="getId" vt="const char*">
      <param name="inst" vt="this" remark="Track instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Track instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <data include="fback">
      <var name="props" vt="iONode"/>
    </data>
  </object>


  <object name="TT" interface="$../rocint/rocint.xml:BlockBase" use="node,mutex" include="loc,$rocint/public/blockbase" remark="Turntable object">
    <typedef def="void (*tt_listener)(obj,const char*,const char*)"/>
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="TT node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="TT instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="isLocked" vt="Boolean">
      <param name="inst" vt="this" remark="TT instance"/>
      <param name="locid" vt="const char*" remark="Querying locid"/>
    </fun>
    <fun name="setListener" vt="Boolean">
      <param name="inst" vt="this" remark="TT instance"/>
      <param name="listenerObj" vt="obj"/>
      <param name="listenerFun" vt="const tt_listener"/>
    </fun>
    <fun name="isSet" vt="Boolean" remark="true if the sensor state matches the wanted state">
      <param name="inst" vt="this" remark="TT instance"/>
    </fun>
    <fun name="getRunDir" vt="Boolean" remark="true if the run direction is forwards">
      <param name="inst" vt="this" remark="TT instance"/>
    </fun>
    <data include="fback,block">
      <var name="lockedId" vt="const char*"/>
      <var name="props" vt="iONode"/>
      <var name="ttBlock" vt="iOBlock"/>
      <var name="dir" vt="Boolean"/>
      <var name="lcdir" vt="Boolean"/>
      <var name="light" vt="Boolean"/>
      <var name="triggerS1" vt="Boolean"/>
      <var name="triggerS2" vt="Boolean"/>
      <var name="triggerSmid1" vt="Boolean"/>
      <var name="triggerSmid2" vt="Boolean"/>
      <var name="hasMid2" vt="Boolean"/>
      <var name="tablepos" vt="int"/>
      <var name="gotopos" vt="int"/>
      <var name="delaytick" vt="unsigned long"/>
      <var name="pending" vt="Boolean" remark="pending move operation"/>
      <var name="skippos" vt="int" remark="ignore posfb until an other got active"/>
      <var name="muxLock" vt="iOMutex"/>
      <var name="listenerObj" vt="obj" remark="Turntable listener object"/>
      <var name="listenerFun" vt="tt_listener" remark="Turntable listener function"/>
      <var name="locIdGroup" vt="const char*"/>
      <var name="selectedTrack" vt="iONode"/>
      <var name="locoOnBridge" vt="Boolean"/>
      <var name="f[32]" vt="Boolean"/>
      </data>
  </object>

  <object name="Http" use="node,thread,socket,map,mutex" remark="HttpMonitor.">
    <typedef def="void(*httpcon_callback)(obj,iONode)"/>
    <fun name="inst" vt="this" remark="Object creator.">
      <param name="ini" vt="iONode" remark="Http ini."/>
      <param name="callbackfun" vt="httpcon_callback"/>
      <param name="callbackobj" vt="obj"/>
      <param name="imgpath" vt="const char*" remark="Image path from the server."/>
      <param name="controlcode" vt="const char*"/>
      <param name="slavecode" vt="const char*"/>
    </fun>
    <fun name="shutdown" vt="void" remark="Shutdown Http.">
      <param name="inst" vt="this" remark="Http instance."/>
    </fun>
    <fun name="createPostDataMap" vt="iOMap" remark="Parse and map the post data.">
      <param name="postdata" vt="const char*" remark="Data from web browser."/>
    </fun>
    <fun name="deletePostDataMap" vt="void" remark="">
      <param name="postdatamap" vt="iOMap" remark=""/>
    </fun>
    <fun name="setCallback" vt="void">
      <param name="inst" vt="this" remark="Http instance"/>
      <param name="callbackfun" vt="httpcon_callback"/>
      <param name="callbackobj" vt="obj"/>
    </fun>
    <fun name="broadcastEvent" vt="void">
      <param name="inst" vt="this" remark="Http instance."/>
      <param name="evt" vt="iONode"/>
    </fun>
    <fun name="isEnded" vt="Boolean">
      <param name="inst" vt="this" remark="Http instance."/>
    </fun>
    <data>
      <var name="port" vt="int" remark="Port to service."/>
      <var name="portmanager" vt="iOThread" remark="Port manager thread."/>
      <var name="portserver" vt="iOThread" remark="Port server thread."/>
      <var name="srvrsocket" vt="iOSocket" remark="Server socket."/>
      <var name="clientMap" vt="iOMap" remark="Port client map."/>
      <var name="pport" vt="int" remark="Port to service."/>
      <var name="pportmanager" vt="iOThread" remark="Port manager thread."/>
      <var name="pportserver" vt="iOThread" remark="Port server thread."/>
      <var name="psrvrsocket" vt="iOSocket" remark="Server socket."/>
      <var name="pclientMap" vt="iOMap" remark="Port client map."/>
      <var name="pclientmux" vt="iOMutex" remark="Port client map mutex."/>
      <var name="shutdown" vt="Boolean" remark=""/>
      <var name="ini" vt="iONode" remark=""/>
      <var name="webclient" vt="iONode" remark=""/>
      <var name="callback" vt="httpcon_callback"/>
      <var name="callbackObj" vt="obj"/>
      <var name="controlcode" vt="const char*"/>
      <var name="slavecode" vt="const char*"/>
    </data>
  </object>

  <object name="HClient" use="node,list,thread,socket,file" remark="HttpClient.">
    <fun name="inst" vt="this" remark="Object creator.">
      <param name="socket" vt="iOSocket" remark="Client socket."/>
      <param name="path" vt="const char*" remark="Scan path."/>
      <param name="refresh" vt="int" remark="browser refresh time"/>
    </fun>
    <fun name="work" vt="Boolean" remark="Work slice.">
      <param name="inst" vt="this" remark="HClient instance."/>
    </fun>
    <fun name="getId" vt="const char*" remark="HClient ID.">
      <param name="inst" vt="this" remark="HClient instance."/>
    </fun>
    <data>
      <var name="id" vt="long" remark=""/>
      <var name="cid" vt="char*" remark="Client ID"/>
      <var name="socket" vt="iOSocket" remark="Client socket."/>
      <var name="rcptBuffer" vt="char*" remark="Receipt buffer."/>
      <var name="rcptSize" vt="int" remark="Size of receipt."/>
      <var name="path" vt="const char*" remark="Scan path"/>
      <var name="refresh" vt="int" remark="browser refresh time"/>
    </data>
  </object>

  <object name="PClient" use="node,list,thread,socket,file" remark="HttpPlanClient.">
    <fun name="inst" vt="this" remark="Object creator.">
      <param name="socket" vt="iOSocket" remark="Client socket."/>
      <param name="ini" vt="iONode" remark="WebClient ini"/>
    </fun>
    <fun name="work" vt="Boolean" remark="Work slice.">
      <param name="inst" vt="this" remark="HClient instance."/>
      <param name="event" vt="iONode" remark="Event node."/>
      <param name="cmd" vt="char**" remark="Command XML."/>
    </fun>
    <fun name="getId" vt="const char*" remark="PClient ID.">
      <param name="inst" vt="this" remark="PClient instance."/>
    </fun>
    <fun name="shutdown" vt="void" remark="PClient ID.">
      <param name="inst" vt="this" remark="PClient instance."/>
    </fun>
    <data>
      <var name="id" vt="long" remark=""/>
      <var name="cid" vt="char*" remark="Client ID"/>
      <var name="websocketreader" vt="iOThread"/>
      <var name="firstbyte" vt="unsigned char"/>
      <var name="websocketavail" vt="Boolean" remark=""/>
      <var name="websocketerror" vt="Boolean" remark=""/>
      <var name="websocketrun" vt="Boolean" remark=""/>
      <var name="websocket" vt="Boolean" remark=""/>
      <var name="websocketmonitor" vt="Boolean" remark=""/>
      <var name="socket" vt="iOSocket" remark="Client socket."/>
      <var name="rcptBuffer" vt="char*" remark="Receipt buffer."/>
      <var name="rcptSize" vt="int" remark="Size of receipt."/>
      <var name="path" vt="const char*" remark="Scan path"/>
      <var name="refresh" vt="int" remark="browser refresh time"/>
      <var name="locIDs" vt="iOList" remark="LocID's"/>
      <var name="ini" vt="iONode" remark="webclient ini"/>
    </data>
    <struct name="extraItem" typedef="*iOExtraItem">
      <var name="skip" vt="Boolean"/>
      <var name="html[256]" vt="char"/>
    </struct>
  </object>


  <object name="MVTrack" use="node" remark="Measure Velocity Track">
    <fun name="inst" vt="this">
      <param name="props" vt="iONode" remark="Settings"/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="MVTrack instance"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="MVTrack instance"/>
      <param name="modification" vt="iONode" remark="Modification node"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="s1State" vt="Boolean"/>
      <var name="s2State" vt="Boolean"/>
      <var name="triggerS1" vt="Boolean"/>
      <var name="triggerS2" vt="Boolean"/>
      <var name="mvMillis" vt="int"/>
      <var name="mvTime" vt="long"/>
    </data>
  </object>

  <object name="SelTab" interface="$../rocint/rocint.xml:BlockBase" use="map,list,node,mutex" include="loc,$rocint/public/blockbase" remark="Selectiontable object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="seltab node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="isLocked" vt="Boolean">
      <param name="inst" vt="this" remark="instance"/>
      <param name="locid" vt="const char*" remark="Querying locid"/>
    </fun>
    <fun name="isSet" vt="Boolean" remark="true if the sensor state matches the wanted state">
      <param name="inst" vt="this" remark="instance"/>
    </fun>
    <fun name="isManager" vt="Boolean" remark="true if the fiddle yard is block manager">
      <param name="inst" vt="this" remark="instance"/>
    </fun>
    <data include="fback">
      <var name="lockedId" vt="const char*"/>
      <var name="lockedDir" vt="Boolean"/>
      <var name="lockedRouteList" vt="iOList"/>
      <var name="blockId" vt="const char*"/>
      <var name="props" vt="iONode"/>
      <var name="tablepos" vt="int"/>
      <var name="gotopos" vt="int"/>
      <var name="pending" vt="Boolean" remark="pending move operation"/>
      <var name="muxLock" vt="iOMutex"/>
      <var name="reportedPos" vt="int"/>
      <var name="fbEvents" vt="iOMap"/>
      <var name="psenState" vt="Boolean" remark="position sensor state"/>
      <var name="closereq" vt="Boolean"/>
      <var name="reverse" vt="Boolean"/>
      <var name="fromBlockId" vt="const char*"/>
      <var name="byRouteId" vt="const char*"/>
      <var name="unlockTick" vt="long"/>
    </data>
  </object>


  <object name="ModPlan" use="map,list,node">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="modplan node"/>
    </fun>
    <fun name="resolveRoutes" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="model" vt="iONode" remark="model node"/>
      <param name="module" vt="iONode" remark="module node"/>
      <param name="moduleRoot" vt="iONode" remark="module node"/>
      <param name="level" vt="int"/>
    </fun>
    <fun name="getModPlan" vt="iONode">
      <param name="inst" vt="this" remark="instance"/>
    </fun>
    <fun name="parse" vt="iONode">
      <param name="inst" vt="this" remark="instance"/>
    </fun>
    <fun name="parsePlan" vt="iONode">
      <param name="filename" vt="const char*"/>
    </fun>
    <fun name="getModule" vt="iONode">
      <param name="inst" vt="this" remark="instance"/>
      <param name="modid" vt="const char*"/>
    </fun>
    <fun name="setModPlan" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="modplan" vt="iONode"/>
    </fun>
    <fun name="setModule" vt="iONode">
      <param name="inst" vt="this" remark="instance"/>
      <param name="module" vt="iONode"/>
    </fun>
    <fun name="save" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="filename" vt="const char*"/>
    </fun>
    <fun name="modify" vt="Boolean">
      <param name="inst" vt="this" remark="instance"/>
      <param name="item" vt="iONode"/>
    </fun>
    <fun name="addModule" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="module" vt="iONode"/>
    </fun>
    <fun name="getBlocks4Point" vt="iOList">
      <param name="inst" vt="this" remark="instance"/>
      <param name="modid" vt="const char*"/>
      <param name="point" vt="const char*"/>
    </fun>
    <fun name="getEvent4Block" vt="iONode">
      <param name="inst" vt="this" remark="instance"/>
      <param name="modid" vt="const char*"/>
      <param name="block" vt="iONode"/>
      <param name="comingfrom" vt="const char*"/>
      <param name="eventid" vt="const char*"/>
    </fun>
    <fun name="getModuleRouteIDs" vt="iOList">
      <param name="inst" vt="this" remark="instance"/>
      <param name="routeids" vt="const char*"/>
    </fun>
    <fun name="getResolvedRouteID" vt="const char*">
      <param name="inst" vt="this" remark="instance"/>
      <param name="routeid" vt="const char*"/>
    </fun>
    <fun name="mergeList" vt="void">
      <param name="listname" vt="const char*"/>
      <param name="model" vt="iONode"/>
      <param name="module" vt="iONode"/>
      <param name="level" vt="int"/>
      <param name="r" vt="int"/>
      <param name="cx" vt="int"/>
      <param name="cy" vt="int"/>
      <param name="broadcast" vt="Boolean"/>
    </fun>
    <fun name="mergeLocs" vt="void">
      <param name="model" vt="iONode"/>
      <param name="fname" vt="const char*"/>
    </fun>
    <fun name="saveLocs" vt="void">
      <param name="model" vt="iONode"/>
      <param name="fname" vt="const char*"/>
    </fun>
    <data>
      <var name="model" vt="iONode"/>
      <var name="modplan" vt="iONode"/>
      <var name="modList" vt="iOList"/>
      <var name="modconList" vt="iOList"/>
      <var name="unresolvedRouteList" vt="iOList"/>
      <var name="fbeventMap" vt="iOMap"/>
      <var name="blockMap" vt="iOMap"/>
      <var name="routeIdMap" vt="iOMap"/>
      <var name="mod2routeIdMap" vt="iOMap"/>
      <var name="endmodid" vt="const char*"/>
    </data>
  </object>


  <object name="Module" use="node">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="module node"/>
    </fun>
    <fun name="getRotationArea" vt="void">
      <param name="module" vt="iONode"/>
      <param name="Xmax" vt="int*"/>
      <param name="Ymax" vt="int*"/>
    </fun>
    <fun name="rotateModule" vt="void">
      <param name="model" vt="iONode"/>
      <param name="module" vt="iONode"/>
      <param name="level" vt="int"/>
      <param name="rotation" vt="int"/>
    </fun>
    <fun name="rotate90" vt="void">
      <param name="item" vt="iONode"/>
      <param name="cx" vt="int"/>
      <param name="cy" vt="int"/>
    </fun>
    <fun name="rotate180" vt="void">
      <param name="item" vt="iONode"/>
      <param name="cx" vt="int"/>
      <param name="cy" vt="int"/>
    </fun>
    <fun name="rotate270" vt="void">
      <param name="item" vt="iONode"/>
      <param name="cx" vt="int"/>
      <param name="cy" vt="int"/>
    </fun>

    <data>
      <var name="module" vt="iONode"/>
    </data>
  </object>


  <object name="Action" use="node,thread">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="action node"/>
    </fun>
    <fun name="exec" vt="void">
      <param name="inst" vt="this"/>
      <param name="ctrl" vt="iONode" remark="action control node"/>
    </fun>
    <fun name="tick" vt="void">
      <param name="inst" vt="this"/>
      <param name="seconds" vt="int"/>
      </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Action instance"/>
      <param name="modification" vt="iONode" remark="Modification node"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Action instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <data>
      <var name="action" vt="iONode"/>
      <var name="timerthread" vt="iOThread"/>
      <var name="actionctrl" vt="iONode"/>
      <var name="timer" vt="int"/>
      <var name="randomsecs" vt="int"/>
      <var name="ticker" vt="int"/>
      <var name="lastacthour" vt="int"/>
      <var name="lastactmin" vt="int"/>
      <var name="lastactsec" vt="int"/>
      <var name="enabled" vt="Boolean"/>
      </data>
  </object>


  <object name="Car" interface="HtmlInt" use="node,map" include="htmlint" remark="Car object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Car node"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="addWaybill" vt="void">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="waybill" vt="iONode" remark="Waybill node"/>
    </fun>
    <fun name="getIdent" vt="const char*">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getLen" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getWeight" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getAddress" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getFunctionStatus" vt="iONode">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="funcmd" vt="iONode" remark="function command node"/>
    </fun>
    <fun name="setLocality" vt="void">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="id" vt="const char*" remark="Locality ID"/>
    </fun>
    <fun name="getFnNrByDesc" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="desc" vt="const char*" remark="Function description"/>
    </fun>
    <fun name="swapPlacing" vt="void">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="cmd" vt="iONode" remark="Optional cmd node with placing information."/>
    </fun>
    <fun name="getCV" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="nr" vt="int" remark="CVByte number"/>
    </fun>
    <fun name="setCV" vt="void">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="nr" vt="int" remark="CVByte number"/>
      <param name="value" vt="int" remark="CVByte value"/>
    </fun>
    <fun name="isCommuter" vt="Boolean">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getVMax" vt="int">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <fun name="getLocality" vt="const char*">
      <param name="inst" vt="this" remark="Car instance"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="fx[32]" vt="Boolean"/>
      <var name="cvMap" vt="iOMap"/>
      </data>
  </object>


  <object name="Dec" interface="HtmlInt" use="node,map" include="htmlint" remark="Decoder object">
    <fun name="getCV" vt="int">
      <param name="props" vt="iONode" remark="Dec properties"/>
      <param name="nr" vt="int" remark="CVByte number"/>
    </fun>
    <fun name="setCV" vt="void">
      <param name="props" vt="iONode" remark="Dec properties"/>
      <param name="nr" vt="int" remark="CVByte number"/>
      <param name="value" vt="int" remark="CVByte value"/>
    </fun>
  </object>


  <object name="Operator" interface="HtmlInt" use="node" include="htmlint" remark="Operator object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Operator node"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="Car instance"/>
      <param name="cmd" vt="iONode" remark="Command node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="getLen" vt="int">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="trainweight" vt="int*"/>
    </fun>
    <fun name="swapPlacing" vt="void">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="cmd" vt="iONode" remark="Optional cmd node with placing information."/>
    </fun>
    <fun name="hasCar" vt="Boolean">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="id" vt="const char*"/>
    </fun>
    <fun name="isCommuter" vt="Boolean">
      <param name="inst" vt="this" remark="Operator instance"/>
    </fun>
    <fun name="getCargo" vt="const char*">
      <param name="inst" vt="this" remark="Operator instance"/>
    </fun>
    <fun name="getClass" vt="const char*">
      <param name="inst" vt="this" remark="Operator instance"/>
    </fun>
    <fun name="hasClass" vt="Boolean">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="class" vt="const char*"/>
    </fun>
    <fun name="setClass" vt="void">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="class" vt="const char*"/>
    </fun>
    <fun name="getVMax" vt="int">
      <param name="inst" vt="this" remark="Operator instance"/>
    </fun>
    <fun name="setLocality" vt="void">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="bkid" vt="const char*" remark="Block ID"/>
    </fun>
    <fun name="setFnByDesc" vt="Boolean">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="desc" vt="const char*"/>
      <param name="flip" vt="Boolean"/>
      <param name="fon" vt="Boolean"/>
      <param name="duration" vt="int"/>
    </fun>
    <fun name="matchIdent" vt="Boolean">
      <param name="inst" vt="this" remark="Operator instance"/>
      <param name="ident1" vt="const char*" remark="Loco ident code"/>
      <param name="ident2" vt="const char*" remark="Loco ident code"/>
      <param name="ident3" vt="const char*" remark="Loco ident code"/>
      <param name="ident4" vt="const char*" remark="Loco ident code"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
    </data>
  </object>


  <object name="PowerMan" interface="HtmlInt" use="node,map,thread,mutex" include="htmlint" remark="Power Manager object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="The booster list"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="PowerMan instance"/>
      <param name="cmd" vt="iONode" remark="PwrCmd node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="PowerMan instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="getBooster4Block" vt="const char*">
      <param name="inst" vt="this" remark="PowerMan instance"/>
      <param name="blockid" vt="const char*"/>
    </fun>
    <fun name="hasBlockPower" vt="Boolean">
      <param name="inst" vt="this" remark="PowerMan instance"/>
      <param name="blockid" vt="const char*"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="boostermap" vt="iOMap"/>
      <var name="boostermapmux" vt="iOMutex"/>
      <var name="scmap" vt="iOMap"/>
      <var name="pwmap" vt="iOMap"/>
    </data>
  </object>


  <object name="R2Rnet" use="node,map,event,mutex,list,thread,socket" remark="FreeRail to FreeRail Network object.">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="The setup node."/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
      <param name="cmd" vt="iONode" remark="R2RCmd node"/>
    </fun>
    <fun name="quit" vt="void">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
    </fun>
    <fun name="getBlock" vt="iONode">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
      <param name="bkid" vt="const char*" remark="Block ID with FreeRail ID as prefix."/>
    </fun>
    <fun name="reserveBlock" vt="Boolean">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
      <param name="rrid" vt="const char*" remark="FreeRail ID."/>
      <param name="bkid" vt="const char*" remark="Block ID."/>
      <param name="stid" vt="const char*" remark="Net Route ID."/>
      <param name="lc" vt="iONode" remark="Loco properties"/>
      <param name="bk" vt="iONode" remark="Current block properties"/>
      <param name="check" vt="Boolean" remark="Check if the block is free"/>
    </fun>
    <fun name="unlockBlock" vt="Boolean">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
      <param name="rrid" vt="const char*" remark="FreeRail ID."/>
      <param name="bkid" vt="const char*" remark="Block ID."/>
      <param name="lcid" vt="const char*" remark="Loco ID."/>
    </fun>
    <fun name="locoIsIn" vt="void">
      <param name="inst" vt="this" remark="R2Rnet instance"/>
      <param name="rrid" vt="const char*" remark="FreeRail ID of remote server."/>
      <param name="lcid" vt="const char*" remark="Loco ID"/>
      <param name="bkid" vt="const char*" remark="Block ID"/>
    </fun>
    <fun name="compare" vt="Boolean">
      <param name="id1" vt="const char*" remark="Object ID"/>
      <param name="id2" vt="const char*" remark="Object ID"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="netroutes" vt="iONode"/>
      <var name="routelist" vt="iOList"/>
      <var name="readUDP" vt="iOSocket"/>
      <var name="writeUDP" vt="iOSocket"/>
      <var name="reader" vt="iOThread"/>
      <var name="writer" vt="iOThread"/>
      <var name="run" vt="Boolean"/>
      <var name="gotnetroutes" vt="Boolean"/>
      <var name="netroutesprovider" vt="Boolean"/>
      <var name="reqMux" vt="iOMutex"/>
      <var name="rspEvt" vt="iOEvent"/>
      <var name="openreq" vt="iONode"/>
      <var name="response" vt="iONode"/>
    </data>
  </object>

  <object name="BlockGroup" use="node,map" remark="Block Group object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="BlockGroup definition"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="instance"/>
      <param name="cmd" vt="iONode" remark="Cmd node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="lock" vt="Boolean">
      <param name="inst" vt="this" remark="BlockGroup instance"/>
      <param name="BlockId" vt="const char*"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="isFree" vt="Boolean">
      <param name="inst" vt="this" remark="BlockGroup instance"/>
      <param name="BlockId" vt="const char*"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="unlock" vt="Boolean">
      <param name="inst" vt="this" remark="BlockGroup instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="isLockedForLoco" vt="Boolean">
      <param name="inst" vt="this" remark="Model instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="BlockGroup instance"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="lockmap" vt="iOMap"/>
      <var name="firstBlock" vt="const char*"/>
      <var name="firstLoco" vt="const char*"/>
      <var name="allowfollowup" vt="Boolean"/>1
      <var name="maxfollowup" vt="int"/>1
      <var name="followupend" vt="Boolean"/>1
    </data>
  </object>



  <object name="Location" use="node,map,list,mutex" remark="Location object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Location definition"/>
    </fun>
    <fun name="cmd" vt="Boolean">
      <param name="inst" vt="this" remark="instance"/>
      <param name="cmd" vt="iONode" remark="Cmd node"/>
    </fun>
    <fun name="modify" vt="void">
      <param name="inst" vt="this" remark="instance"/>
      <param name="mod" vt="iONode" remark="Modify node"/>
    </fun>
    <fun name="hasBlock" vt="Boolean">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="BlockId" vt="const char*"/>
    </fun>
    <fun name="hasFreeBlock" vt="Boolean">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="locoId" vt="const char*"/>
    </fun>
    <fun name="isDepartureAllowed" vt="Boolean">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="didNotDepart" vt="void">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="locoDidArrive" vt="void">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="locoDidDepart" vt="void">
      <param name="inst" vt="this" remark="Location instance"/>
      <param name="LocoId" vt="const char*"/>
    </fun>
    <fun name="reset" vt="void">
      <param name="inst" vt="this" remark="Location instance"/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="minocc" vt="int"/>
      <var name="fifo" vt="Boolean"/>
      <var name="arriveList" vt="iOList"/>
      <var name="locoPending" vt="Boolean"/>
      <var name="locoPendingID" vt="const char*"/>
      <var name="listmux" vt="iOMutex"/>
    </data>
  </object>

  <object name="SNMP" use="socket,node,thread,map" remark="SNMP Support">
    <const name="pdu_SEQUENCE"   vt="int" val="0x30"/>
    <const name="pdu_GETREQ"     vt="int" val="0xA0"/>
    <const name="pdu_GETNEXTREQ" vt="int" val="0xA1"/>
    <const name="pdu_GETRSP"     vt="int" val="0xA2"/>
    <const name="pdu_SETREQ"     vt="int" val="0xA3"/>
    <const name="pdu_TRAP"       vt="int" val="0xA4"/>
    <const name="pdu_BULKREQ"    vt="int" val="0xA5"/>

    <const name="var_INT"      vt="int" val="2"/>
    <const name="var_STRING"   vt="int" val="4"/>
    <const name="var_OBJECTID" vt="int" val="6"/>
    <const name="var_NULL"     vt="int" val="5"/>
    <const name="var_TIMETICK" vt="int" val="67"/>
    <const name="var_IP"       vt="int" val="64"/>
    <const name="var_EOFMIB"   vt="int" val="130"/>

    <const name="trap_COLDSTART" vt="int" val="0"/>
    <const name="trap_WARMSTART" vt="int" val="1"/>
    <const name="trap_LINKDOWN"  vt="int" val="2"/>
    <const name="trap_LINKUP"    vt="int" val="3"/>
    <const name="trap_USER"      vt="int" val="7"/>
    
    <const name="err_OK"         vt="int" val="0"/>
    <const name="err_tooBig"     vt="int" val="1"/>
    <const name="err_noSuchName" vt="int" val="2"/>
    <const name="err_badValue"   vt="int" val="3"/>
    <const name="err_readOnly"   vt="int" val="4"/>
    <const name="err_genErr"     vt="int" val="5"/>
    
    <fun name="inst" vt="this" remark="">
      <param name="ini" vt="iONode" remark="Initialization node."/>
    </fun>
    <fun name="shutdown" vt="void">
      <param name="inst" vt="this" remark="Shutdown SNMP support."/>
    </fun>
    <fun name="link" vt="void">
      <param name="inst" vt="this" remark="Shutdown SNMP support."/>
      <param name="count" vt="int" remark="Link count."/>
      <param name="up" vt="Boolean" remark="upLink."/>
    </fun>
    <fun name="exception" vt="void">
      <param name="inst" vt="this" remark="Shutdown SNMP support."/>
      <param name="msg" vt="const char*" remark="Exception message."/>
    </fun>
    <struct name="SnmpVar" typedef="*iOSnmpVar">
      <var name="oid[128]" vt="char"/>
      <var name="vartype" vt="int"/>
      <var name="vars[128]" vt="char"/>
      <var name="vari" vt="int"/>
    </struct>
    <struct name="SnmpHdr" typedef="*iOSnmpHdr">
      <var name="seqlen" vt="int"/>
      <var name="version" vt="int"/>
      <var name="community[128]" vt="char"/>
      <var name="request" vt="int"/>
      <var name="reqID" vt="int"/>
      <var name="errstatus" vt="int"/>
      <var name="errindex" vt="int"/>
      <var name="oids" vt="int"/>
      <var name="oid[32]" vt="struct SnmpVar"/>
    </struct>
    <data>
      <var name="ini" vt="iONode"/>
      <var name="snmpSock" vt="iOSocket"/>
      <var name="snmpTrapSock" vt="iOSocket"/>
      <var name="server" vt="iOThread" remark=""/>
      <var name="trap" vt="Boolean" remark=""/>
      <var name="run" vt="Boolean" remark=""/>
      <var name="mibDB" vt="iOMap" remark=""/>
      <var name="mibMap" vt="iOMap" remark=""/>
      <var name="mibRW" vt="iOMap" remark=""/>
      <var name="oidList" vt="iOList" remark=""/>
      <var name="seqnr" vt="int" remark=""/>
      <var name="linkup" vt="int" remark=""/>
      <var name="linkcnt" vt="int" remark=""/>
      <var name="lastexc" vt="char*" remark=""/>
    </data>
  </object>

  <object name="Analyse" use="trace,node,map" include="model" remark="Track plan analyser.">
    <const name="MINIMAL_MAX_CONNECTOR_DISTANCE" vt="int" val="10" remark="default and minimum for distance between 2 connectors"/>
    <typedef def="enum {AN_JOB=0,AN_CLEAN,AN_HEALTH,AN_EXTCHK,AN_EXTCLEAN} an_mode"/>
    <fun name="inst" vt="this">
    </fun>
    <fun name="analyse" vt="int">
      <param name="inst" vt="this" remark="Analyse plan."/>
    </fun>
    <fun name="cleanup" vt="int">
      <param name="inst" vt="this" remark="Cleanup analyse plan."/>
    </fun>
    <fun name="checkPlanHealth" vt="Boolean">
      <param name="inst" vt="this" remark="Basic health check"/>
    </fun>
    <fun name="checkExtended" vt="Boolean">
      <param name="inst" vt="this" remark="Check for more complex problems"/>
    </fun>
    <fun name="cleanExtended" vt="Boolean">
      <param name="inst" vt="this" remark="Clean some complex problems"/>
    </fun>
    <data>
      <var name="model" vt="iOModel"/>
      <var name="plan" vt="iONode"/>
      <var name="objectmap" vt="iOMap"/>
      <var name="minZlevel" vt="int" remark="minimum level number in plan"/>
      <var name="maxZlevel" vt="int" remark="maximum level number in plan"/>
      <var name="maxConnectorDistance" vt="int" remark="distance to search between 2 connectors"/>
      <var name="maxRecursionDepth" vt="int" remark="maximum recursion depth"/>
      <var name="bklist" vt="iOList"/>
      <var name="preRTlist" vt="iOList"/>
      <var name="notRTlist" vt="iOList"/>
      <!-- analyze -->
      <var name="setRouteId"                    vt="Boolean" remark="Set for all automatic detected routes"/>
      <var name="setBlockId"                    vt="Boolean" remark="Set for all blocks"/>
      <var name="addSignalBlockAssignment"      vt="Boolean" remark="Assign signals to blocks"/>
      <var name="addFeedbackBlockAssignment"    vt="Boolean" remark="Assign feedbacks to blocks"/>
      <!-- clear all analyze -->
      <var name="cleanRouteId"                  vt="Boolean" remark="Clean routeids of all automatic detected routes"/>
      <var name="resetBlockId"                  vt="Boolean" remark="Reset blockids in whole plan"/>
      <var name="resetSignalBlockAssignment"    vt="Boolean" remark="Reset sg assignments in all blocks"/>
      <var name="resetFeedbackBlockAssignment"  vt="Boolean" remark="Reset fb assignments in all blocks"/>
      <!-- extended plan check -->
      <var name="basicCheck"                    vt="Boolean" remark="Basic checks on all items"/>
      <var name="blockCheck"                    vt="Boolean" remark="Checks concerning blocks"/>
      <var name="routeCheck"                    vt="Boolean" remark="Checks concerning routes"/>
      <var name="actionCheck"                   vt="Boolean" remark="Check actions and conditions"/>
      <!-- extended plan clean -->
      <var name="basicClean"                    vt="Boolean" remark="Clean basic problems on all items"/>
      <var name="blockClean"                    vt="Boolean" remark="Clean block problems"/>
      <var name="routeClean"                    vt="Boolean" remark="Clean route problems"/>
      <var name="actionClean"                   vt="Boolean" remark="Clean action and condition problems"/>
   </data>
  </object>

  <object name="Script" use="list,node,thread" remark="Script interpreter.">
    <fun name="inst" vt="this" remark="">
      <param name="script" vt="const char*" remark="Optional script."/>
    </fun>
    <fun name="setScript" vt="void">
      <param name="inst" vt="this"/>
      <param name="script" vt="const char*"/>
    </fun>
    <fun name="getLine" vt="iONode">
      <param name="inst" vt="this"/>
      <param name="linenr" vt="int"/>
    </fun>
    <fun name="nextLine" vt="iONode">
      <param name="inst" vt="this"/>
      <param name="playpause" vt="Boolean"/>
      </fun>
    <fun name="parseLine" vt="iONode">
      <param name="scriptline" vt="const char*"/>
      <param name="playpause" vt="Boolean"/>
      </fun>
    <fun name="convertNode" vt="char*">
      <param name="node" vt="iONode"/>
      <param name="addStamp" vt="Boolean"/>
      </fun>
    <fun name="setRecording" vt="void">
      <param name="inst" vt="this"/>
      <param name="recording" vt="Boolean"/>
      <param name="addStamp" vt="Boolean"/>
      </fun>
    <fun name="recordNode" vt="void">
      <param name="inst" vt="this"/>
      <param name="node" vt="iONode"/>
    </fun>
    <fun name="isRecording" vt="Boolean">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="isPlaying" vt="Boolean">
      <param name="inst" vt="this"/>
      <param name="linenr" vt="int*"/>
    </fun>
    <fun name="Play" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="Stop" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="Pause" vt="void">
      <param name="inst" vt="this"/>
    </fun>
    <fun name="setCallback" vt="void">
      <param name="inst" vt="this"/>
      <param name="callback" vt="obj"/>
    </fun>
    <data>
      <var name="linenr" vt="int"/>
      <var name="pline" vt="const char*"/>
      <var name="nrlines" vt="int"/>
      <var name="script" vt="const char*"/>
      <var name="record" vt="char*"/>
      <var name="recording" vt="Boolean"/>
      <var name="playing" vt="Boolean"/>
      <var name="pause" vt="Boolean"/>
      <var name="player" vt="iOThread"/>
      <var name="run" vt="Boolean"/>
      <var name="prevtime" vt="long"/>
      <var name="callback" vt="obj"/>
      <var name="stamp" vt="Boolean"/>
    </data>
  </object>
  
  <object name="Var" use="node,map" include="htmlint" remark="Decoder object">
    <fun name="checkActions" vt="void">
      <param name="var" vt="iONode" remark="Variable properties"/>
    </fun>
    <fun name="getText" vt="char*">
      <param name="valStr" vt="const char*" remark="Value string."/>
      <param name="map" vt="iOMap" remark="Map with replacements. (optional)"/>
      <param name="separator" vt="char" remark="List separator"/>
    </fun>
    <fun name="getValue" vt="int">
      <param name="valStr" vt="const char*" remark="Value string."/>
      <param name="map" vt="iOMap" remark="Map with replacements. (optional)"/>
    </fun>
    <fun name="setRandom" vt="Boolean">
      <param name="var" vt="iONode"/>
    </fun>
  </object>


  <object name="Weather" use="node,map,list,mutex,thread" remark="Weather object">
    <fun name="inst" vt="this">
      <param name="ini" vt="iONode" remark="Weather definition"/>
    </fun>
    <fun name="halt">
      <param name="inst" vt="this" remark="Weather instance"/>
    </fun>
    <fun name="setWeather" vt="void">
      <param name="inst" vt="this" remark="Weather instance"/>
      <param name="id" vt="const char*" remark="Weather ID."/>
      <param name="param" vt="const char*" remark="Weather parameters."/>
    </fun>
    <fun name="setTheme" vt="void">
      <param name="inst" vt="this" remark="Weather instance"/>
      <param name="id" vt="const char*" remark="Theme ID."/>
    </fun>
    <fun name="isWeather" vt="Boolean">
      <param name="inst" vt="this" remark="Weather instance"/>
      <param name="id" vt="const char*" remark="Weather ID."/>
    </fun>
    <data>
      <var name="props" vt="iONode"/>
      <var name="run" vt="Boolean"/>
      <var name="makeWeather" vt="iOThread"/>
      <var name="theme" vt="iONode"/>
      <var name="themeduration" vt="int"/>
      <var name="themedim" vt="int"/>
      <var name="themetimer1" vt="int"/>
      <var name="themetimerrand" vt="int"/>
      <var name="themestartup" vt="Boolean"/>
      <var name="themeshutdown" vt="Boolean"/>
      <var name="requestedTheme" vt="char*"/>
      <var name="themesoundtimer" vt="int"/>
      <var name="themedimtimer" vt="int"/>
      <var name="starthour" vt="int"/>
      <var name="startminute" vt="int"/>
      <var name="ebreak" vt="Boolean"/>
    </data>
  </object>
  
  <object name="XmlScript" use="node,map" include="htmlint" remark="XmlScript Helper">
    <fun name="run" vt="void">
      <param name="xmlscript" vt="const char*"/>
      <param name="map" vt="iOMap"/>
    </fun>
  </object>


</Project>
